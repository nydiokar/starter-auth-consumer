generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  emailVerifiedAt         DateTime?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  isActive                Boolean                  @default(true)
  password                PasswordCredential?
  sessions                Session[]
  roles                   UserRole[]
  emailVerificationTokens EmailVerificationToken[]
  passwordResetTokens     PasswordResetToken[]
}

model PasswordCredential {
  userId    String  @id
  hash      String
  algo      String
  createdAt DateTime @default(now())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  ipHash    String
  userAgent String
  revokedAt DateTime?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  tokenHash String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  tokenHash String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id        String     @id @default(cuid())
  name      String     @unique
  userRoles UserRole[]
}

model UserRole {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  @@id([userId, roleId])
}

model AuditLog {
  id     String   @id @default(cuid())
  at     DateTime @default(now())
  userId String?
  ip     String?
  ua     String?
  kind   String
  meta   String?
}

